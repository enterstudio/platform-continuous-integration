if [ -r ~/platform-continuous-integration/csi.rc ];then
. ~/platform-continuous-integration/csi.rc
else
	echo "where is csi.rc? :("
fi
start_instances()
{
	IMAGE=$1
	INSTS_AMOUNT=$2
	SECURITY_GROUP=$3
		INSTID=`ec2-run-instances $IMAGE -n $INSTS_AMOUNT -k $PEM_CRT -g $SECURITY_GROUP --availability-zone $AV_ZONE | grep INSTANCE |awk -F " " '{print $2}'`
	   	if [ -n "$INSTID" ];then
			echo $INSTID
			return 0
		fi
		return 1
}

term_instance()
{
	INSTID=$1
	return ec2-terminate-instances $INSTID
	
}
get_instance_ip()
{
	INSTID=$1
	IP_ADDR=`ec2-describe-instances $INSTID  | grep -o -P "\d+\.\d+\.\d+\.\d+" | grep -v '^10\.'`
	if [ -n "$IP_ADDR" ];then
		echo $IP_ADDR
		return 0
	else
		return 1
	fi
}

get_instance_status()
{
	INSTID=$1
	if ec2-describe-instance-status $INSTID|grep -q "ok\s*ok\s*active";then
		return 0
	fi
	return 1
}

install_release_file()
{
	ssh -t -l$EC2_USR $IP -i$PEM_CRT_PATH $SSH_QUIET_OPTS "sudo rpm -Uhv $RELEASE_RPM_URL"
}
upgrade_kalt()
{
	IP=$1
	RELEASE_RPM_URL=$2
	install_release_file
	ssh -t -l$EC2_USR $IP -i$PEM_CRT_PATH $SSH_QUIET_OPTS 'sudo yum -y update "*kaltura*"'
}

selinux_set_permissive()
{
	ssh -t -l$EC2_USR $IP -i$PEM_CRT_PATH $SSH_QUIET_OPTS "sudo setenforce permissive"
}

install_kalt_allin1()
{
	RELEASE_RPM_URL=$1
	INSTID=$2
	INSTS_AMOUNT=$3
	install_mysql_db 1 
	ID=`start_instances $INSTID $INSTS_AMOUNT $SECURITY_GROUP`
	sleep 10
	IP=`get_instance_ip $ID`
	if [ -z "$IP" ];then return 1;fi
	STATUS=0
	while ! get_instance_status $ID ;do
		echo "Waiting for instance to init.."
		sleep 45
	done
	echo "Machine up and running.. SSHing."
	selinux_set_permissive
	install_release_file
	ssh -t -l$EC2_USR $IP -i$PEM_CRT_PATH $SSH_QUIET_OPTS "sudo yum -y install $META_PACKAGE_NAME"
	cat all1in.ans >allin1.$IP.ans
	cat $MYSQL_ANS_FILE >> allin1.$IP.ans
	scp  -i$PEM_CRT_PATH $SSH_QUIET_OPTS allin1.$IP.ans $EC2_USR@$IP:/tmp
	ssh -t -l$EC2_USR $IP -i$PEM_CRT_PATH $SSH_QUIET_OPTS "sudo /opt/kaltura/bin/kaltura-config-all.sh $ANS_FILE"
}

install_mysql_db()
{
	ANS_FILE=mysql.template.ans
	INSTID=$MY_SQL_INST_ID
	INSTS_AMOUNT=$1
	ID=`start_instances $INSTID $INSTS_AMOUNT $SECURITY_GROUP`
	sleep 10
	IP=`get_instance_ip $ID`
	if [ -z "$IP" ];then return 1;fi
	STATUS=0
	while ! get_instance_status $ID ;do
		echo "Waiting for instance $ID to init.."
		sleep 45
	done
	echo "Machine up and running... testing MySQL connectivity."
	echo "select version();" | mysql -h$IP -u$MYSQL_SUPER_USER -p$MYSQL_SUPER_USER_PASSWD -P$MYSQL_PORT -N
	if [ $? -ne 0 ];then
cat << EOF
Failed to run:
# mysql -h$IP -u$MYSQL_SUPER_USER -p$MYSQL_SUPER_USER_PASSWD -P$MYSQL_PORT."
Check your settings."
EOF
	return 1
fi

	sed "s#@MYSQL_HOST@#$IP#g" $ANS_FILE >$ANS_FILE.$IP
	sed "s#@KALT_DB_PASS@#$MYSQL_PORT#g" -i $ANS_FILE.$IP
	sed "s#@MYSQL_PORT@#$MYSQL_PORT#g" -i $ANS_FILE.$IP
	export MYSQL_ANS_FILE=$ANS_FILE.$IP

}

check_img_status()
{
	IMGID=$1
	while ! ec2-describe-images $IMGID | grep available;do 
		echo "Wait for it.."		
		sleep 20
	done
}
