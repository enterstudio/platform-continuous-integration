# using this library requires:
# http://docs.aws.amazon.com/AWSEC2/latest/CommandLineReference/ec2-cli-get-set-up.html
if [ -r ~/platform-continuous-integration/csi.rc ];then
. ~/platform-continuous-integration/csi.rc
else
	echo "where is csi.rc? :("
fi
start_instances()
{
	IMAGE=$1
	INSTS_AMOUNT=$2
	SECURITY_GROUP=$3
	START=`date +%s`

	INSTID=`ec2-run-instances $IMAGE -n $INSTS_AMOUNT -k $PEM_CRT -g $SECURITY_GROUP --availability-zone $AV_ZONE | grep INSTANCE |awk -F " " '{print $2}'`
	RC=$?
        END=`date +%s`
	report "Run instance from image $IMAGE" $RC "instance ID: $INSTID" "`expr $END - $START`"
	if [ -n "$INSTID" ];then
		echo $INSTID
		return 0
	fi
	return 1
}

term_instance()
{
	INSTID=$1
	return ec2-terminate-instances $INSTID
	
}
get_instance_ip()
{
	INSTID=$1
	IP_ADDR=`ec2-describe-instances $INSTID  | grep -o -P "\d+\.\d+\.\d+\.\d+" | grep -v '^10\.'`
	if [ -n "$IP_ADDR" ];then
		echo $IP_ADDR
		return 0
	else
		return 1
	fi
}

get_instance_status()
{
	INSTID=$1
	if ec2-describe-instance-status $INSTID|grep -q "ok\s*ok\s*active";then
		return 0
	fi
	return 1
}

install_release_file()
{
	ssh -t -l$EC2_USR $IP -i$PEM_CRT_PATH $SSH_QUIET_OPTS "sudo rpm -Uhv $RELEASE_RPM_URL"
}
upgrade_kalt()
{
	IP=$1
	RELEASE_RPM_URL=$2
	install_release_file
	ssh -t -l$EC2_USR $IP -i$PEM_CRT_PATH $SSH_QUIET_OPTS 'sudo yum -y update "*kaltura*"'
}

selinux_set_permissive()
{
	ssh -t -l$EC2_USR $IP -i$PEM_CRT_PATH $SSH_QUIET_OPTS "sudo setenforce permissive"
}

install_kalt_allin1()
{
	RELEASE_RPM_URL=$1
	KALT_IMAGE=$2
	echo $KALT_IMAGE
	INSTS_AMOUNT=$3
	install_mysql_db 1 
	echo $KALT_IMAGE
	ID=`start_instances $KALT_IMAGE $INSTS_AMOUNT $SECURITY_GROUP`
	sleep 10
	IP=`get_instance_ip $ID`
	if [ -z "$IP" ];then return 1;fi
	STATUS=0
	START=`date +%s`
	while ! get_instance_status $ID ;do
		echo "Waiting for instance to init.."
		sleep 45
	done
	RC=$?
        END=`date +%s`
	report "Kaltura instance init" $RC "instance ID: $ID" "`expr $END - $START`"
	echo "Machine up and running.. SSHing."
	selinux_set_permissive
	install_release_file
	START=`date +%s`
	ssh -t -l$EC2_USR $IP -i$PEM_CRT_PATH $SSH_QUIET_OPTS "sudo yum -y install $META_PACKAGE_NAME"
	RC=$?	
	END=`date +%s`
	report "Kaltura RPMs download and install" $RC "yum -y install $META_PACKAGE_NAME" "`expr $END - $START`" 
	cat all1in.ans >allin1.$IP.ans
	REG_HOST=`get_inst_reg_hostname $ID`
	sed -i "s#@HOSTNAME@#$REG_HOST#g" allin1.$IP.ans
	cat $MYSQL_ANS_FILE >> allin1.$IP.ans
	scp  -i$PEM_CRT_PATH $SSH_QUIET_OPTS allin1.$IP.ans $EC2_USR@$IP:/tmp
	START=`date +%s`
	ssh -t -l$EC2_USR $IP -i$PEM_CRT_PATH $SSH_QUIET_OPTS "sudo /opt/kaltura/bin/kaltura-config-all.sh /tmp/allin1.$IP.ans"
	RC=$?	
	END=`date +%s`
	report "Postinst configuration" $RC "kaltura-config-all.sh /tmp/allin1.$IP.ans" "`expr $END - $START`" 
}

install_mysql_db()
{
	ANS_FILE=mysql.template.ans
	MY_SQL_INSTID=$MY_SQL_INST_ID
	INSTS_AMOUNT=$1
	ID=`start_instances $MY_SQL_INSTID $INSTS_AMOUNT $SECURITY_GROUP`
	sleep 10
	IP=`get_instance_ip $ID`
	if [ -z "$IP" ];then return 1;fi
	STATUS=0
	START=`date +%s`
	while ! get_instance_status $ID ;do
		echo "Waiting for instance $ID to init.."
		sleep 45
	done
	RC=$?
        END=`date +%s`
	report "Kaltura instance init" $RC "instance ID: $ID" "`expr $END - $START`"
	echo "Machine up and running... testing MySQL connectivity."
	echo "select version();" | mysql -h$IP -u$MYSQL_SUPER_USER -p$MYSQL_SUPER_USER_PASSWD -P$MYSQL_PORT -N
	if [ $? -ne 0 ];then
cat << EOF
Failed to run:
# mysql -h$IP -u$MYSQL_SUPER_USER -p$MYSQL_SUPER_USER_PASSWD -P$MYSQL_PORT."
Check your settings."
EOF
	return 1
fi

	sed "s#@MYSQL_HOST@#$IP#g" $ANS_FILE >$ANS_FILE.$IP
	sed "s#@KALT_DB_PASS@#$KALT_DB_PASS#g" -i $ANS_FILE.$IP
	sed "s#@MYSQL_PORT@#$MYSQL_PORT#g" -i $ANS_FILE.$IP
	sed "s#@MYSQL_SUPER_USER_PASSWD@#$MYSQL_SUPER_USER_PASSWD#g" -i $ANS_FILE.$IP
	sed "s#@MYSQL_SUPER_USER@#$MYSQL_SUPER_USER#g" -i $ANS_FILE.$IP
	export MYSQL_ANS_FILE=$ANS_FILE.$IP

}

check_img_status()
{
	IMGID=$1
	while ! ec2-describe-images $IMGID | grep available;do 
		echo "Wait for it.."		
		sleep 20
	done
}

get_inst_reg_hostname()
{
	INSTANCE_ID=$1
	echo `ec2-describe-instances $INSTANCE_ID|grep INSTANCE|awk -F " " '{print $4}'`
}

#setup_sanity_env()
#{
#}

get_minus2_secret()
{
	API_IP=$1
	. allin1.$API_IP.ans
	ADMIN_PARTNER_SECRET=`echo "select admin_secret from partner where id=-2" | mysql -N -h $DB1_HOST -p$DB1_PASS $DB1_NAME -u$DB1_USER`
	sed "s#@ADMIN_PARTNER_SECRET@#$ADMIN_PARTNER_SECRET#g" sanity_tests/utils.template.rc > sanity_tests/utils.rc
	sed "s#@SERVICE_URL@#$SERVICE_URL#g" -i sanity_tests/utils.rc
}

report()
{
	TNAME=$1
	RC=$2
	TOUT=$3
	TIME=$4
	echo "$TNAME::$RC::$TOUT::$TIME" >> /tmp/report
}

run_sanity_tests()
{
	API_IP=$1
	. allin1.$API_IP.ans
	ADMIN_PARTNER_SECRET=`echo "select admin_secret from partner where id=-2" | mysql -N -h $DB1_HOST -p$DB1_PASS $DB1_NAME -u$DB1_USER`
	START=`date +%s`
	PARTNER_ID=`php sanity_tests/create_partner.php $ADMIN_PARTNER_SECRET mb@kaltura.com testingpasswd $SERVICE_URL`
	END=`date +%s`
	RC=$?
	report "Create Partner" $RC "New PID is $PARTNER_ID" "`expr $END - $START`" 
	START=`date +%s`
	PARTNER_SECRET=`echo "select admin_secret from partner where id=$PARTNER_ID" | mysql -N -h $DB1_HOST -p$DB1_PASS $DB1_NAME -u$DB1_USER`
	PARTNER_ID=`php sanity_tests/upload_test.php $SERVICE_URL $PARTNER_ID $PARTNER_SECRET sanity_tests/sources/cat.mp4`
	END=`date +%s`
	RC=$?
		report "Create Partner" $RC "New PID is $PARTNER_ID" "`expr $END - $START`" 
}
